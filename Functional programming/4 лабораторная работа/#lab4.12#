(defun monte-carlo (n w x1 y1 x2 y2 x3 y3 xmin dx ymin dy k)
    (if (zerop n) k
        (let ((rx (+ xmin (random dx)))
              (ry (+ ymin (random dy))))
             	 (grwPset w rx ry _BLUE)
              (if (is-in rx ry x1 y1 x2 y2 x3 y3) 
                  (monte-carlo (- n 1) w x1 y1 x2 y2 x3 y3 xmin dx ymin dy (+ k 1))
                  (monte-carlo (- n 1) w x1 y1 x2 y2 x3 y3 xmin dx ymin dy k)))))
                  
                  
(defun task-r (x1 y1 x2 y2 x3 y3 &optional (n 1000))
 (let* ((s (square-3 x1 y1 x2 y2 x3 y3))
        (xmin (min x1 x2 x3))
        (xmax (max x1 x2 x3))
        (ymin (min y1 y2 y3))
        (ymax (max y1 y2 y3))
        (dx (- xmax xmin))
        (dy (- ymax ymin)) 
        (srec (* dy dx))
        (r 0)
        (w (gensym 'w)))
     (grwCreate w 300 300 "Monte-Carlo" _WHITE)
     (grwSetParm w 3 1 _BLUE _BLUE)
     (grwShow w)
     (grwScale w -100 100 -100 100)
     (grwLine w x1 y1 x2 y2 _RED)
     (grwLine w x2 y2 x3 y3 _RED)
     (grwLine w x3 y3 x1 y1 _RED)
     (setq r  (* dx dy (rat2flo (/ (monte-carlo n w x1 y1 x2 y2 x3 y3 xmin dx ymin dy 0) n))))
     (grwLine w x1 y1 x2 y2 _RED)
     (grwLine w x2 y2 x3 y3 _RED)
     (grwLine w x3 y3 x1 y1 _RED) r))